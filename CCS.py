import re

class CCSError(Exception):
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return repr(self.value)

class CCSNode(object):

        name = ""
        value = ""
        comment = ""

        def isHead( self ) :
                if (self.name != None and self.value == None and self.comment == None and self.name != '!'):
                        return True
                return False

	def isTail( self ) :
		if (self.name == '!' and self.value == None and self.comment == None):
			return True
		return False
	def isParameter( self ) :
		if (self.name != None and self.value != None):
			return True
		return False

	def isAnnotation( self ) :
		if (self.name == None and self.value == None and self.comment != None):
			return True
		return False

	def stripTags( self ) : 
		if (self.name != None):
			self.name = self.name.strip()
		if (self.value != None):
                        self.value = self.value.strip()
		if (self.comment != None):
                        self.comment = self.comment.strip()
		return

class CCS(object):

	lines = []
	nodes = {}
	linePt = 0
	nodeDeep = 0
	
	def load(self,  filename ) :
		f = open(filename)
		self.lines = f.readlines() 
		f.close()

		nodes = {}
		self.__buildNodeTree(nodes)
		self.nodes = nodes

		self.lines = []
		self.linePt = 0
		self.nodeDeep = 0

		return
	def save ( self, filename ) :
		head = "# VAF CCS text config, generated by " + __name__ + "\n#\n"
		tail="#EOF#"

		f = open(filename,'w')
		f.write(head)
		f.write(self.__compose(self.nodes))
		f.write(tail)
		f.close()

		return

	def __buildNodeTree (self, parent ) :
		p = re.compile(ur'^\s*([!a-zA-Z0-9-_\\.\\:]+)?(?:\s*([^\\s#][^#]+))?(?:\s*#(.*))?$')
		while (self.linePt < len(self.lines)):
			m = p.search(self.lines[self.linePt])
			node = self.__createNode(m.groups())
			if node.isTail():
				self.linePt += 1
				self.nodeDeep -= 1
				if (self.nodeDeep < 0):
					raise CCSError("Node deep '" + str(self.nodeDeep) + "' out of range! Line: " + str(self.linePt));
				break
			if node.isHead():
				parent[node.name] = {}
				self.linePt += 1
				self.nodeDeep += 1
				self.__buildNodeTree(parent[node.name])
				continue
			if node.isParameter():
				parent[node.name] = node.value
				self.linePt += 1
				continue
			if node.isAnnotation():
				self.linePt += 1
				continue
			raise CCSError("Unknown node! Line: " + str(self.linePt) + " Dump: " + str(vars(node)))
		return
	def __compose( self, nodes, index = 0 ) :
		output = ''
		indent = self.__indent(index)
		for key, value in nodes.iteritems():
			if (isinstance(value, dict)):
				output += indent + key + "\n"
				output += self.__compose(value, index + 1)
				output += indent + "!\n"
			else:
				output += indent + key + ' ' + value + " # " + key + "\n"
		return output
	def __indent(self, index, chr_ = ' ') :
		ptr = 0
		indent = ''
		while (ptr < index):
			indent += chr_
			ptr += 1
		return indent
	def __createNode( self, matches ) :
		node = CCSNode()
		node.name = matches[0]
		node.value = matches[1]
		node.comment = matches[2]
		node.stripTags()
		return node
